// Arquivo: schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Definição do modelo do usuário, incluindo informações de login e detalhes do plano
model Student {
  id             String           @id @default(cuid())
  name           String           @default("N/A")
  cpf            String           @unique
  email          String           @unique
  password       String           @default("N/A")
  status         Boolean          @default(true)
  birthDate      DateTime
  weight         String           @default("N/A")
  gender         String           @default("N/A")
  phone          String           @default("N/A")
  CEP            String           @default("N/A")
  city           String           @default("N/A")
  address        String           @default("N/A")
  number         String           @default("N/A")
  state          String           @default("N/A")
  createdAt      DateTime         @default(now())
  StudentPlan    StudentPlan[]
  Plan           Plan?            @relation(fields: [planId], references: [id])
  planId         String?
  Financial      Financial[]
  Routine        Routine[]
  StudentRoutine StudentRoutine[]

  @@map("students")
}

// Definição do modelo de plano, que inclui informações sobre o período de tempo para o qual o usuário tem acesso
model Plan {
  id        String   @id @default(cuid())
  name      String
  duration  Int // Duração em dias do plano
  price     Float // Preço em reais do plano
  createdAt DateTime @default(now())

  // Relacionamento com usuários que têm este plano
  students    Student[]
  StudentPlan StudentPlan[]

  @@map("plans")
}

// Definição do modelo de associação entre estudante e plano
model StudentPlan {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  dueDate    DateTime
  planValue  Float
  // Chave estrangeira para o modelo Student
  studentId  String // Renomeado de userId para studentId
  student    Student     @relation(fields: [studentId], references: [id])
  // Chave estrangeira para o modelo Plan
  planId     String
  plan       Plan        @relation(fields: [planId], references: [id])
  financials Financial[]

  @@map("student_plans")
}

// Definição do modelo financeiro
model Financial {
  id            String       @id @default(cuid())
  studentId     String
  student       Student      @relation(fields: [studentId], references: [id])
  paymentDate   DateTime
  paymentType   String
  paymentValue  Float
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  StudentPlan   StudentPlan? @relation(fields: [studentPlanId], references: [id])
  studentPlanId String?

  @@map("financials")
}

// Derinição do modelo de grupo muscular
model MuscleGroup {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  Exercise  Exercise[]
  Training  Training[]

  @@map("muscle_groups")
}

model ExercisePlan {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  exercises Exercise[] // referência a todos os exercícios associados a este plano

  @@map("exercise_plans")
}

// Definição do modelo de exercício
model Exercise {
  id            String          @id @default(cuid())
  name          String
  description   String?
  url           String
  muscleGroupId String
  muscleGroup   MuscleGroup     @relation(fields: [muscleGroupId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  exercisePlan  ExercisePlan[] // relacão muitos-para-muitos com exercício(s)
  Training      Training[]
  trainingSheet TrainingSheet[]

  @@map("exercises")
}

// Definição do modelo de rotinas
model Routine {
  id          String  @id @default(cuid())
  name        String
  workoutType String?
  objective   String
  observation String?

  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?

  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime         @default(now())
  TrainingSheet  TrainingSheet[]
  StudentRoutine StudentRoutine[]

  @@map("routines")
}

model TrainingSheet {
  id          String     @id @default(cuid())
  name        String
  workoutType String?
  routine     Routine?   @relation(fields: [routineId], references: [id], onDelete: Cascade)
  routineId   String?
  exercise    Exercise?  @relation(fields: [exerciseId], references: [id])
  exerciseId  String?
  createdAt   DateTime   @default(now())
  Training    Training[]

  @@map("training_Sheet")
}

// Definição do modelo de treinos
model Training {
  id              String         @id @default(cuid())
  name            String
  muscleGroup     MuscleGroup?   @relation(fields: [muscleGroupId], references: [id])
  muscleGroupId   String?
  exercise        Exercise?      @relation(fields: [exerciseId], references: [id])
  exerciseId      String?
  repetitions     Int?
  restTimeSeconds Int?
  weight          Float?
  trainingSheet   TrainingSheet? @relation(fields: [trainingSheetId], references: [id], onDelete: Cascade)
  trainingSheetId String?
  createdAt       DateTime       @default(now())

  @@map("trainings")
}

// Definição do modelo de associação entre estudante e rotinas de treino
model StudentRoutine {
  id        String   @id @default(cuid())
  name      String
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String
  routine   Routine  @relation(fields: [routineId], references: [id])
  routineId String
  createdAt DateTime @default(now())

  @@map("student_routines")
}
